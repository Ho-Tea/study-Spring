spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: cos
    password: cos1234

  mvc:
    view:
      prefix: /templates/
      suffix: .mustache

  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 819863001320-dsvkklnabe2vro9aa8ts1sm5blftukr4.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          facebook: # /oauth2/authorization/facebook 이 주소를 동작하게 한다.
            client-id: 237180259002413
            client-secret: f746c8e186b844d0c7559f38e8c6d564
            scope:
              - email
              - public_profile
          naver:
            client-id: O2w1UEYfhVUS0jZq6h0K
            client-secret: Nco_mDcRAm
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver # 구글이나 페이스북에서는 기본으로 설정되어 있어 굳이 안적어주어도 된다

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 네이버 로그인 버튼을 클릭하였을 때 이동할 '네이버 로그인' URL을 먼저 생성하여야 합니다.
            token-uri: https://nid.naver.com/oauth2.0/token # Callback으로 전달받은 정보를 이용하여 접근 토큰을 발급받을 수 있습니다. 접근 토큰은 사용자가 인증을 완료했다는 것을 보장할 수 있는 인증 정보입니다.
            user-info-uri: https://openapi.naver.com/v1/nid/me # 사용자 로그인 정보를 획득하기 위해서는 프로필 정보 조회 API를 먼저 호출하여야 합니다.
            user-name-attribute: response # 회원정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해준다

